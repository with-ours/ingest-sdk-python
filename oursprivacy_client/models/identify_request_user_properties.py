# coding: utf-8

"""
    Ours

    The Ours Server-Side REST API

    The version of the OpenAPI document: 1.0.0
    Contact: support@oursprivacy.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class IdentifyRequestUserProperties(BaseModel):
    """
    User properties to associate with this user. The existing user properties will be updated. And all future events will have these properties associated with them.
    """ # noqa: E501
    email: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = None
    first_name: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = None
    last_name: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = None
    gender: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = None
    date_of_birth: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = None
    phone_number: Optional[Any] = None
    city: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = None
    state: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = None
    zip: Optional[Any] = None
    country: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = None
    external_id: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = None
    company_name: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = None
    job_title: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = None
    ip: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The IP address of the user")
    __properties: ClassVar[List[str]] = ["email", "first_name", "last_name", "gender", "date_of_birth", "phone_number", "city", "state", "zip", "country", "external_id", "company_name", "job_title", "ip"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IdentifyRequestUserProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if first_name (nullable) is None
        # and model_fields_set contains the field
        if self.first_name is None and "first_name" in self.model_fields_set:
            _dict['first_name'] = None

        # set to None if last_name (nullable) is None
        # and model_fields_set contains the field
        if self.last_name is None and "last_name" in self.model_fields_set:
            _dict['last_name'] = None

        # set to None if gender (nullable) is None
        # and model_fields_set contains the field
        if self.gender is None and "gender" in self.model_fields_set:
            _dict['gender'] = None

        # set to None if date_of_birth (nullable) is None
        # and model_fields_set contains the field
        if self.date_of_birth is None and "date_of_birth" in self.model_fields_set:
            _dict['date_of_birth'] = None

        # set to None if phone_number (nullable) is None
        # and model_fields_set contains the field
        if self.phone_number is None and "phone_number" in self.model_fields_set:
            _dict['phone_number'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['city'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if zip (nullable) is None
        # and model_fields_set contains the field
        if self.zip is None and "zip" in self.model_fields_set:
            _dict['zip'] = None

        # set to None if country (nullable) is None
        # and model_fields_set contains the field
        if self.country is None and "country" in self.model_fields_set:
            _dict['country'] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict['external_id'] = None

        # set to None if company_name (nullable) is None
        # and model_fields_set contains the field
        if self.company_name is None and "company_name" in self.model_fields_set:
            _dict['company_name'] = None

        # set to None if job_title (nullable) is None
        # and model_fields_set contains the field
        if self.job_title is None and "job_title" in self.model_fields_set:
            _dict['job_title'] = None

        # set to None if ip (nullable) is None
        # and model_fields_set contains the field
        if self.ip is None and "ip" in self.model_fields_set:
            _dict['ip'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IdentifyRequestUserProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email": obj.get("email"),
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "gender": obj.get("gender"),
            "date_of_birth": obj.get("date_of_birth"),
            "phone_number": obj.get("phone_number"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "zip": obj.get("zip"),
            "country": obj.get("country"),
            "external_id": obj.get("external_id"),
            "company_name": obj.get("company_name"),
            "job_title": obj.get("job_title"),
            "ip": obj.get("ip")
        })
        return _obj


