# coding: utf-8

"""
    Ours

    The Ours Server-Side REST API

    The version of the OpenAPI document: 1.0.0
    Contact: support@oursprivacy.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from oursprivacy_client.models.identify_request_user_properties import IdentifyRequestUserProperties
from oursprivacy_client.models.track_request_default_properties import TrackRequestDefaultProperties
from typing import Optional, Set
from typing_extensions import Self

class IdentifyRequest(BaseModel):
    """
    IdentifyRequest
    """ # noqa: E501
    token: Annotated[str, Field(min_length=1, strict=True, max_length=250)] = Field(description="The token for your Ours Privacy Source. You can find this in the Ours dashboard.")
    user_id: Annotated[str, Field(min_length=1, strict=True, max_length=400)] = Field(description="The Ours user id stored in local storage and cookies on your web properties. If userId is included in the request, we do not lookup the user by email or externalId.", alias="userId")
    user_properties: IdentifyRequestUserProperties = Field(alias="userProperties")
    default_properties: Optional[TrackRequestDefaultProperties] = Field(default=None, alias="defaultProperties")
    __properties: ClassVar[List[str]] = ["token", "userId", "userProperties", "defaultProperties"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IdentifyRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user_properties
        if self.user_properties:
            _dict['userProperties'] = self.user_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_properties
        if self.default_properties:
            _dict['defaultProperties'] = self.default_properties.to_dict()
        # set to None if default_properties (nullable) is None
        # and model_fields_set contains the field
        if self.default_properties is None and "default_properties" in self.model_fields_set:
            _dict['defaultProperties'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IdentifyRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "token": obj.get("token"),
            "userId": obj.get("userId"),
            "userProperties": IdentifyRequestUserProperties.from_dict(obj["userProperties"]) if obj.get("userProperties") is not None else None,
            "defaultProperties": TrackRequestDefaultProperties.from_dict(obj["defaultProperties"]) if obj.get("defaultProperties") is not None else None
        })
        return _obj


