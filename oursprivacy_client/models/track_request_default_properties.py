# coding: utf-8

"""
    Ours

    The Ours Server-Side REST API

    The version of the OpenAPI document: 1.0.0
    Contact: support@oursprivacy.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class TrackRequestDefaultProperties(BaseModel):
    """
    These properties are used throughout the Ours app to pass known values onto destinations
    """ # noqa: E501
    is_bot: Optional[StrictBool] = Field(default=None, description="Whether we have detected that the user is a bot. This is set automatically by the Ours server primarily for events tracked through the web SDK.")
    ad_id: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The ad id for detected in the session. This is set by the web sdk automatically.")
    adset_id: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The adset id for detected in the session. This is set by the web sdk automatically.")
    campaign_id: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The campaign id for detected in the session. This is set by the web sdk automatically.")
    encoding: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The browsers encoding. Ex: UTF-8")
    browser_name: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The name of the browser. Ex: Chrome")
    browser_version: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The version of the browser. Ex: 114.0")
    cpu_architecture: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The architecture of the CPU. Ex: x64")
    device_type: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The type of device the user is using. Ex: mobile")
    device_model: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The model of the device. Ex: iPhone 13")
    device_vendor: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The vendor of the device. Ex: Apple")
    engine_name: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The name of the browser engine. Ex: Blink")
    engine_version: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The version of the browser engine. Ex: 114.0")
    os_name: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The name of the operating system. Ex: Windows")
    os_version: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The version of the operating system. Ex: 10.0")
    browser_language: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The language of the browser. Ex: en-US")
    current_url: Optional[StrictStr] = Field(default=None, description="The full url (including query params) of the current page")
    webview: Optional[StrictBool] = Field(default=None, description="Whether the user is in a webview. Ex: true")
    iframe: Optional[StrictBool] = Field(default=None, description="Whether the user is in an iframe. Ex: true")
    session_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of sessions the user has had. Ex: 3", alias="sessionCount")
    active_duration: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The active time in milliseconds that the user had this tab active", alias="activeDuration")
    duration: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The time in milliseconds since the page was loaded // script was loaded")
    epik: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The Pinterest Click ID. Ex: epik456")
    sacid: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The StackAdapt Tracking ID. Ex: sacid123")
    fbc: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="Facebook Click ID with prefix format for Conversions API tracking. Ex: fb.1.1554763741205.AbCdEfGhIjKlMnOpQrStUvWxYz1234567890")
    fbclid: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="Raw Facebook Click ID query parameter without prefix from ad clicks. Ex: AbCdEfGhIjKlMnOpQrStUvWxYz1234567890")
    fbp: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="Facebook Browser ID parameter for identifying browsers and attributing events. Ex: fb.1.1554763741205.1098115397")
    gad_source: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The Google Ad Source. Ex: google")
    gbraid: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The Google Braid ID. Ex: gbraid123")
    gclid: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The Google Click ID. Ex: gclid123")
    ndclid: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The NextDoor Click ID. Ex: ndclid123")
    dclid: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The DoubleClick Click ID. Ex: dclid123")
    qclid: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The Quora Click ID. Ex: qclid123")
    rdt_cid: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The Reddit Click ID. Ex: rdt_cid123")
    host: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The host of the current page. Ex: example.com")
    ip: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The IP address of the user. Ex: 127.0.0.1")
    msclkid: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The Microsoft Click ID. Ex: msclkid123")
    li_fat_id: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The LinkedIn Click ID. Ex: li_fat_id123")
    pathname: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The pathname of the current page. Ex: /home")
    referrer: Optional[Annotated[str, Field(strict=True, max_length=5000)]] = Field(default=None, description="The referrer URL of the current page")
    screen_height: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The height of the screen. Ex: 1080")
    screen_width: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The width of the screen. Ex: 1920")
    title: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The title of the current page")
    user_agent: Optional[StrictStr] = Field(default=None, description="The user agent of the browser")
    utm_campaign: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The UTM Campaign. The web SDK automatically captures this from the query params.")
    utm_content: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The UTM Content. The web SDK automatically captures this from the query params.")
    utm_medium: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The UTM Medium. The web SDK automatically captures this from the query params.")
    utm_name: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The UTM Name. The web SDK automatically captures this from the query params.")
    ttclid: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The TikTok Click ID. Ex: ttclid123")
    twclid: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The Twitter Click ID. Ex: twclid123")
    clickid: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The Click ID. Ex: clickid123")
    clid: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The Generic Click ID. Ex: clid123")
    sccid: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The SnapChat Click ID. Ex: sccid123")
    utm_source: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The UTM Source. The web SDK automatically captures this from the query params.")
    utm_term: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The UTM Term. The web SDK automatically captures this from the query params.")
    version: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The version of the web SDK")
    wbraid: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The WBRAID Identifier. The web SDK automatically captures this from the query params.")
    uafvl: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="User agent as a full list of strings.")
    page_hash: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A random set of numbers for the page load")
    sid: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(default=None, description="The session ID as assigned automatically by the web SDK.")
    new_s: Optional[StrictBool] = Field(default=None, description="Deprecated")
    fv: Optional[StrictBool] = Field(default=None, description="Deprecated")
    sr: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = None
    __properties: ClassVar[List[str]] = ["is_bot", "ad_id", "adset_id", "campaign_id", "encoding", "browser_name", "browser_version", "cpu_architecture", "device_type", "device_model", "device_vendor", "engine_name", "engine_version", "os_name", "os_version", "browser_language", "current_url", "webview", "iframe", "sessionCount", "activeDuration", "duration", "epik", "sacid", "fbc", "fbclid", "fbp", "gad_source", "gbraid", "gclid", "ndclid", "dclid", "qclid", "rdt_cid", "host", "ip", "msclkid", "li_fat_id", "pathname", "referrer", "screen_height", "screen_width", "title", "user_agent", "utm_campaign", "utm_content", "utm_medium", "utm_name", "ttclid", "twclid", "clickid", "clid", "sccid", "utm_source", "utm_term", "version", "wbraid", "uafvl", "page_hash", "sid", "new_s", "fv", "sr"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrackRequestDefaultProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if is_bot (nullable) is None
        # and model_fields_set contains the field
        if self.is_bot is None and "is_bot" in self.model_fields_set:
            _dict['is_bot'] = None

        # set to None if ad_id (nullable) is None
        # and model_fields_set contains the field
        if self.ad_id is None and "ad_id" in self.model_fields_set:
            _dict['ad_id'] = None

        # set to None if adset_id (nullable) is None
        # and model_fields_set contains the field
        if self.adset_id is None and "adset_id" in self.model_fields_set:
            _dict['adset_id'] = None

        # set to None if campaign_id (nullable) is None
        # and model_fields_set contains the field
        if self.campaign_id is None and "campaign_id" in self.model_fields_set:
            _dict['campaign_id'] = None

        # set to None if encoding (nullable) is None
        # and model_fields_set contains the field
        if self.encoding is None and "encoding" in self.model_fields_set:
            _dict['encoding'] = None

        # set to None if browser_name (nullable) is None
        # and model_fields_set contains the field
        if self.browser_name is None and "browser_name" in self.model_fields_set:
            _dict['browser_name'] = None

        # set to None if browser_version (nullable) is None
        # and model_fields_set contains the field
        if self.browser_version is None and "browser_version" in self.model_fields_set:
            _dict['browser_version'] = None

        # set to None if cpu_architecture (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_architecture is None and "cpu_architecture" in self.model_fields_set:
            _dict['cpu_architecture'] = None

        # set to None if device_type (nullable) is None
        # and model_fields_set contains the field
        if self.device_type is None and "device_type" in self.model_fields_set:
            _dict['device_type'] = None

        # set to None if device_model (nullable) is None
        # and model_fields_set contains the field
        if self.device_model is None and "device_model" in self.model_fields_set:
            _dict['device_model'] = None

        # set to None if device_vendor (nullable) is None
        # and model_fields_set contains the field
        if self.device_vendor is None and "device_vendor" in self.model_fields_set:
            _dict['device_vendor'] = None

        # set to None if engine_name (nullable) is None
        # and model_fields_set contains the field
        if self.engine_name is None and "engine_name" in self.model_fields_set:
            _dict['engine_name'] = None

        # set to None if engine_version (nullable) is None
        # and model_fields_set contains the field
        if self.engine_version is None and "engine_version" in self.model_fields_set:
            _dict['engine_version'] = None

        # set to None if os_name (nullable) is None
        # and model_fields_set contains the field
        if self.os_name is None and "os_name" in self.model_fields_set:
            _dict['os_name'] = None

        # set to None if os_version (nullable) is None
        # and model_fields_set contains the field
        if self.os_version is None and "os_version" in self.model_fields_set:
            _dict['os_version'] = None

        # set to None if browser_language (nullable) is None
        # and model_fields_set contains the field
        if self.browser_language is None and "browser_language" in self.model_fields_set:
            _dict['browser_language'] = None

        # set to None if current_url (nullable) is None
        # and model_fields_set contains the field
        if self.current_url is None and "current_url" in self.model_fields_set:
            _dict['current_url'] = None

        # set to None if webview (nullable) is None
        # and model_fields_set contains the field
        if self.webview is None and "webview" in self.model_fields_set:
            _dict['webview'] = None

        # set to None if iframe (nullable) is None
        # and model_fields_set contains the field
        if self.iframe is None and "iframe" in self.model_fields_set:
            _dict['iframe'] = None

        # set to None if session_count (nullable) is None
        # and model_fields_set contains the field
        if self.session_count is None and "session_count" in self.model_fields_set:
            _dict['sessionCount'] = None

        # set to None if active_duration (nullable) is None
        # and model_fields_set contains the field
        if self.active_duration is None and "active_duration" in self.model_fields_set:
            _dict['activeDuration'] = None

        # set to None if duration (nullable) is None
        # and model_fields_set contains the field
        if self.duration is None and "duration" in self.model_fields_set:
            _dict['duration'] = None

        # set to None if epik (nullable) is None
        # and model_fields_set contains the field
        if self.epik is None and "epik" in self.model_fields_set:
            _dict['epik'] = None

        # set to None if sacid (nullable) is None
        # and model_fields_set contains the field
        if self.sacid is None and "sacid" in self.model_fields_set:
            _dict['sacid'] = None

        # set to None if fbc (nullable) is None
        # and model_fields_set contains the field
        if self.fbc is None and "fbc" in self.model_fields_set:
            _dict['fbc'] = None

        # set to None if fbclid (nullable) is None
        # and model_fields_set contains the field
        if self.fbclid is None and "fbclid" in self.model_fields_set:
            _dict['fbclid'] = None

        # set to None if fbp (nullable) is None
        # and model_fields_set contains the field
        if self.fbp is None and "fbp" in self.model_fields_set:
            _dict['fbp'] = None

        # set to None if gad_source (nullable) is None
        # and model_fields_set contains the field
        if self.gad_source is None and "gad_source" in self.model_fields_set:
            _dict['gad_source'] = None

        # set to None if gbraid (nullable) is None
        # and model_fields_set contains the field
        if self.gbraid is None and "gbraid" in self.model_fields_set:
            _dict['gbraid'] = None

        # set to None if gclid (nullable) is None
        # and model_fields_set contains the field
        if self.gclid is None and "gclid" in self.model_fields_set:
            _dict['gclid'] = None

        # set to None if ndclid (nullable) is None
        # and model_fields_set contains the field
        if self.ndclid is None and "ndclid" in self.model_fields_set:
            _dict['ndclid'] = None

        # set to None if dclid (nullable) is None
        # and model_fields_set contains the field
        if self.dclid is None and "dclid" in self.model_fields_set:
            _dict['dclid'] = None

        # set to None if qclid (nullable) is None
        # and model_fields_set contains the field
        if self.qclid is None and "qclid" in self.model_fields_set:
            _dict['qclid'] = None

        # set to None if rdt_cid (nullable) is None
        # and model_fields_set contains the field
        if self.rdt_cid is None and "rdt_cid" in self.model_fields_set:
            _dict['rdt_cid'] = None

        # set to None if host (nullable) is None
        # and model_fields_set contains the field
        if self.host is None and "host" in self.model_fields_set:
            _dict['host'] = None

        # set to None if ip (nullable) is None
        # and model_fields_set contains the field
        if self.ip is None and "ip" in self.model_fields_set:
            _dict['ip'] = None

        # set to None if msclkid (nullable) is None
        # and model_fields_set contains the field
        if self.msclkid is None and "msclkid" in self.model_fields_set:
            _dict['msclkid'] = None

        # set to None if li_fat_id (nullable) is None
        # and model_fields_set contains the field
        if self.li_fat_id is None and "li_fat_id" in self.model_fields_set:
            _dict['li_fat_id'] = None

        # set to None if pathname (nullable) is None
        # and model_fields_set contains the field
        if self.pathname is None and "pathname" in self.model_fields_set:
            _dict['pathname'] = None

        # set to None if referrer (nullable) is None
        # and model_fields_set contains the field
        if self.referrer is None and "referrer" in self.model_fields_set:
            _dict['referrer'] = None

        # set to None if screen_height (nullable) is None
        # and model_fields_set contains the field
        if self.screen_height is None and "screen_height" in self.model_fields_set:
            _dict['screen_height'] = None

        # set to None if screen_width (nullable) is None
        # and model_fields_set contains the field
        if self.screen_width is None and "screen_width" in self.model_fields_set:
            _dict['screen_width'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if user_agent (nullable) is None
        # and model_fields_set contains the field
        if self.user_agent is None and "user_agent" in self.model_fields_set:
            _dict['user_agent'] = None

        # set to None if utm_campaign (nullable) is None
        # and model_fields_set contains the field
        if self.utm_campaign is None and "utm_campaign" in self.model_fields_set:
            _dict['utm_campaign'] = None

        # set to None if utm_content (nullable) is None
        # and model_fields_set contains the field
        if self.utm_content is None and "utm_content" in self.model_fields_set:
            _dict['utm_content'] = None

        # set to None if utm_medium (nullable) is None
        # and model_fields_set contains the field
        if self.utm_medium is None and "utm_medium" in self.model_fields_set:
            _dict['utm_medium'] = None

        # set to None if utm_name (nullable) is None
        # and model_fields_set contains the field
        if self.utm_name is None and "utm_name" in self.model_fields_set:
            _dict['utm_name'] = None

        # set to None if ttclid (nullable) is None
        # and model_fields_set contains the field
        if self.ttclid is None and "ttclid" in self.model_fields_set:
            _dict['ttclid'] = None

        # set to None if twclid (nullable) is None
        # and model_fields_set contains the field
        if self.twclid is None and "twclid" in self.model_fields_set:
            _dict['twclid'] = None

        # set to None if clickid (nullable) is None
        # and model_fields_set contains the field
        if self.clickid is None and "clickid" in self.model_fields_set:
            _dict['clickid'] = None

        # set to None if clid (nullable) is None
        # and model_fields_set contains the field
        if self.clid is None and "clid" in self.model_fields_set:
            _dict['clid'] = None

        # set to None if sccid (nullable) is None
        # and model_fields_set contains the field
        if self.sccid is None and "sccid" in self.model_fields_set:
            _dict['sccid'] = None

        # set to None if utm_source (nullable) is None
        # and model_fields_set contains the field
        if self.utm_source is None and "utm_source" in self.model_fields_set:
            _dict['utm_source'] = None

        # set to None if utm_term (nullable) is None
        # and model_fields_set contains the field
        if self.utm_term is None and "utm_term" in self.model_fields_set:
            _dict['utm_term'] = None

        # set to None if version (nullable) is None
        # and model_fields_set contains the field
        if self.version is None and "version" in self.model_fields_set:
            _dict['version'] = None

        # set to None if wbraid (nullable) is None
        # and model_fields_set contains the field
        if self.wbraid is None and "wbraid" in self.model_fields_set:
            _dict['wbraid'] = None

        # set to None if uafvl (nullable) is None
        # and model_fields_set contains the field
        if self.uafvl is None and "uafvl" in self.model_fields_set:
            _dict['uafvl'] = None

        # set to None if page_hash (nullable) is None
        # and model_fields_set contains the field
        if self.page_hash is None and "page_hash" in self.model_fields_set:
            _dict['page_hash'] = None

        # set to None if sid (nullable) is None
        # and model_fields_set contains the field
        if self.sid is None and "sid" in self.model_fields_set:
            _dict['sid'] = None

        # set to None if new_s (nullable) is None
        # and model_fields_set contains the field
        if self.new_s is None and "new_s" in self.model_fields_set:
            _dict['new_s'] = None

        # set to None if fv (nullable) is None
        # and model_fields_set contains the field
        if self.fv is None and "fv" in self.model_fields_set:
            _dict['fv'] = None

        # set to None if sr (nullable) is None
        # and model_fields_set contains the field
        if self.sr is None and "sr" in self.model_fields_set:
            _dict['sr'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrackRequestDefaultProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "is_bot": obj.get("is_bot"),
            "ad_id": obj.get("ad_id"),
            "adset_id": obj.get("adset_id"),
            "campaign_id": obj.get("campaign_id"),
            "encoding": obj.get("encoding"),
            "browser_name": obj.get("browser_name"),
            "browser_version": obj.get("browser_version"),
            "cpu_architecture": obj.get("cpu_architecture"),
            "device_type": obj.get("device_type"),
            "device_model": obj.get("device_model"),
            "device_vendor": obj.get("device_vendor"),
            "engine_name": obj.get("engine_name"),
            "engine_version": obj.get("engine_version"),
            "os_name": obj.get("os_name"),
            "os_version": obj.get("os_version"),
            "browser_language": obj.get("browser_language"),
            "current_url": obj.get("current_url"),
            "webview": obj.get("webview"),
            "iframe": obj.get("iframe"),
            "sessionCount": obj.get("sessionCount"),
            "activeDuration": obj.get("activeDuration"),
            "duration": obj.get("duration"),
            "epik": obj.get("epik"),
            "sacid": obj.get("sacid"),
            "fbc": obj.get("fbc"),
            "fbclid": obj.get("fbclid"),
            "fbp": obj.get("fbp"),
            "gad_source": obj.get("gad_source"),
            "gbraid": obj.get("gbraid"),
            "gclid": obj.get("gclid"),
            "ndclid": obj.get("ndclid"),
            "dclid": obj.get("dclid"),
            "qclid": obj.get("qclid"),
            "rdt_cid": obj.get("rdt_cid"),
            "host": obj.get("host"),
            "ip": obj.get("ip"),
            "msclkid": obj.get("msclkid"),
            "li_fat_id": obj.get("li_fat_id"),
            "pathname": obj.get("pathname"),
            "referrer": obj.get("referrer"),
            "screen_height": obj.get("screen_height"),
            "screen_width": obj.get("screen_width"),
            "title": obj.get("title"),
            "user_agent": obj.get("user_agent"),
            "utm_campaign": obj.get("utm_campaign"),
            "utm_content": obj.get("utm_content"),
            "utm_medium": obj.get("utm_medium"),
            "utm_name": obj.get("utm_name"),
            "ttclid": obj.get("ttclid"),
            "twclid": obj.get("twclid"),
            "clickid": obj.get("clickid"),
            "clid": obj.get("clid"),
            "sccid": obj.get("sccid"),
            "utm_source": obj.get("utm_source"),
            "utm_term": obj.get("utm_term"),
            "version": obj.get("version"),
            "wbraid": obj.get("wbraid"),
            "uafvl": obj.get("uafvl"),
            "page_hash": obj.get("page_hash"),
            "sid": obj.get("sid"),
            "new_s": obj.get("new_s"),
            "fv": obj.get("fv"),
            "sr": obj.get("sr")
        })
        return _obj


